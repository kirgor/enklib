package com.kirgor.tools.sql;

import com.kirgor.tools.sql.dialect.Dialect;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

/**
 * Defines cursor, which wraps the result set of SQL query and allows to fetch more data when needed.
 *
 * Usually, instances of {@link Cursor} are generated by {@link Session} (using .getCursor())
 *
 * @param <T> Entity type.
 */
public class Cursor<T> {
    private ResultSet resultSet;
    private Class<T> entityClass;
    private boolean primitive;
    private FieldInfo[] fieldInfos;
    private boolean finished;

    /**
     * Creates {@link Cursor} instance, which will wrap {@link ResultSet}.
     *
     * @param resultSet   {@link ResultSet} to wrap.
     * @param entityClass Entity class.
     * @param dialect     {@link Dialect} instance, which will convert database field names.
     * @throws SQLException
     * @throws NoSuchFieldException
     */
    public Cursor(ResultSet resultSet, Class<T> entityClass, Dialect dialect) throws SQLException, NoSuchFieldException {
        this.resultSet = resultSet;
        this.entityClass = entityClass;

        this.primitive = EntityUtils.isPrimitive(entityClass);
        if (!primitive) {
            initFieldInfos(resultSet, entityClass, dialect);
        }

        next();
    }

    /**
     * Indicates whether underlying result set has finished.
     *
     * @return True if finished, false if has more data.
     */
    public boolean isFinished() throws SQLException {
        return finished;
    }

    /**
     * Indicates whether underlying result set has more results.
     * Opposite to isFinished().
     *
     * @return True if has more data, otherwise false.
     * @throws SQLException
     */
    public boolean ready() throws SQLException {
        return !finished;
    }

    /**
     * Fetches limited list of entities.
     *
     * @param limit Maximum amount of entities to fetch.
     * @return List of fetched entities.
     * @throws SQLException
     * @throws InstantiationException
     * @throws IllegalAccessException
     */
    public List<T> fetchList(int limit) throws SQLException, InstantiationException, IllegalAccessException {
        ArrayList<T> result = new ArrayList<T>();
        if (primitive) {
            for (int i = 0; i < limit; i++) {
                if (!finished) {
                    result.add(fetchSingleInternal());
                    next();
                } else {
                    break;
                }
            }
        } else {
            for (int i = 0; i < limit; i++) {
                if (!finished) {
                    result.add(fetchSingleInternal());
                    next();
                } else {
                    break;
                }
            }
        }

        return result;
    }

    /**
     * Fetches the whole list of entities. It will not stop until entire result set will end.
     *
     * @return List of fetched entities.
     * @throws SQLException
     * @throws InstantiationException
     * @throws IllegalAccessException
     */
    public List<T> fetchList() throws SQLException, InstantiationException, IllegalAccessException {
        ArrayList<T> result = new ArrayList<T>();
        if (primitive) {
            while (!finished) {
                result.add(fetchSinglePrimitiveInternal());
                next();
            }
        } else {
            while (!finished) {
                result.add(fetchSingleInternal());
                next();
            }
        }

        return result;
    }

    /**
     * Fetches single entity, being sure that it exists. Throws exception if there is no entity.
     *
     * @return Single entity.
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws SQLException
     */
    public T fetchSingle() throws InstantiationException, IllegalAccessException, SQLException {
        if (!finished) {
            T result = primitive ? fetchSinglePrimitiveInternal() : fetchSingleInternal();
            next();
            return result;
        } else {
            throw new SQLException("Result set don't have data for single fetch.");
        }
    }

    /**
     * Fetches single entity or null.
     *
     * @return Single entity if result set have one more, otherwise null.
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws SQLException
     */
    public T fetchSingleOrNull() throws InstantiationException, IllegalAccessException, SQLException {
        if (!finished) {
            T result = primitive ? fetchSinglePrimitiveInternal() : fetchSingleInternal();
            next();
            return result;
        } else {
            return null;
        }
    }

    /**
     * Closes underlying result set and, optionally, the whole connection.
     *
     * @param closeConnection Close underlying connection also. Be aware of this if
     *                        connection is used somewhere else.
     * @throws SQLException
     */
    public void close(boolean closeConnection) throws SQLException {
        if (closeConnection) {
            resultSet.getStatement().getConnection().close();
        } else {
            resultSet.close();
        }

        finished = true;
    }

    /**
     * Closes underlying result set.
     *
     * @throws SQLException
     */
    public void close() throws SQLException {
        close(false);
    }

    private void initFieldInfos(ResultSet resultSet, Class<T> entityClass, Dialect dialect) throws SQLException, NoSuchFieldException {
        ResultSetMetaData meta = resultSet.getMetaData();
        this.fieldInfos = new FieldInfo[meta.getColumnCount()];
        for (int i = 0; i < fieldInfos.length; i++) {
            String columnName = meta.getColumnName(i + 1);
            String[] split = columnName.split("\\.");

            Class currentClass = entityClass;
            FieldInfo currentFieldInfo = new FieldInfo();
            fieldInfos[i] = currentFieldInfo;

            for (int j = 0; j < split.length; j++) {
                currentFieldInfo.field = currentClass.getDeclaredField(dialect.fromDatabaseName(split[j]));
                currentFieldInfo.field.setAccessible(true);
                if (j < split.length - 1) {
                    currentFieldInfo.subFieldInfo = new FieldInfo();
                    currentClass = currentFieldInfo.field.getType();
                    currentFieldInfo = currentFieldInfo.subFieldInfo;
                }
            }
        }
    }

    private T fetchSingleInternal() throws InstantiationException, IllegalAccessException, SQLException {
        T result = entityClass.newInstance();
        for (int i = 0; i < fieldInfos.length; i++) {
            Object value = resultSet.getObject(i + 1);
            // Do not set values when they are null, and let entity field be in default state
            if (value == null) {
                continue;
            }

            FieldInfo fi = fieldInfos[i];
            Object currentEntity = result;
            while (fi != null) {
                if (fi.subFieldInfo == null) {
                    fi.field.set(currentEntity, value);
                } else {
                    Object nextEntity = fi.field.get(currentEntity);
                    if (nextEntity == null) {
                        nextEntity = fi.field.getType().newInstance();
                        fi.field.set(currentEntity, nextEntity);
                    }
                    currentEntity = nextEntity;
                }
                fi = fi.subFieldInfo;
            }
        }
        return result;
    }

    private T fetchSinglePrimitiveInternal() throws SQLException {
        return (T) resultSet.getObject(1);
    }

    private void next() throws SQLException {
        finished = !resultSet.next();
    }

    static class FieldInfo {
        public Field field;
        public FieldInfo subFieldInfo;
    }
}